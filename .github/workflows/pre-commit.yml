name: Pre-commit

on:
  pull_request:
    branches:
      - main
      - develop
    paths:
      - 'docker/**'
      - '.github/workflows/**'
      - 'scripts/**'
  push:
    branches:
      - main
      - develop
    paths:
      - 'docker/**'
      - '.github/workflows/**'
      - 'scripts/**'

jobs:
  pre-commit:
    if: ${{ !contains(github.event.pull_request.title, '[pre-commit-fix]') && !contains(github.event.pull_request.body, '[pre-commit-fix]') }}
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.x

      - name: Install pre-commit
        run: pip install pre-commit

      - name: Cache pre-commit hooks
        uses: actions/cache@v4
        with:
          path: ~/.cache/pre-commit
          key: pre-commit-${{ runner.os }}-${{ hashFiles('.pre-commit-config.yaml') }}
          restore-keys: |
            pre-commit-${{ runner.os }}-

      - name: Run pre-commit (autofix on changed files)
        id: precommit
        run: |
          pre-commit run --from-ref origin/main --to-ref HEAD

      - name: Push fixes back to PR
        if: failure()
        run: |
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git add .

            # Read the mapping file
            map_file="commit-message-map.json"
            default_message="chore: [pre-commit-fix] Apply pre-commit auto-fixes"
            message="$default_message"

            # Dynamically determine the commit message based on changed files
            changed_files=$(git diff --cached --name-only)
            for file in $changed_files; do
                ext="${file##*.}"
                ext=".$ext"
                mapped_message=$(jq -r --arg ext "$ext" '.[$ext] // empty' "$map_file")
                if [ -n "$mapped_message" ]; then
                    message="$mapped_message"
                    break
                fi
            done

            git commit -m "$message"
            git push